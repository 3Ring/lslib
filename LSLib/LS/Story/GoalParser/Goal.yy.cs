// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-F7O5S3F
// DateTime: 2018. 08. 06. 19:10:41
// UserName: Norbyte
// Input file <C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy - 2018. 08. 06. 18:31:58>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace LSLib.LS.Story.GoalParser
{
public enum GoalTokens {
    error=61,EOF=62,VERSION=63,SUBGOALCOMBINER=64,SGC_AND=65,INITSECTION=66,
    KBSECTION=67,EXITSECTION=68,ENDEXITSECTION=69,IF=70,PROC=71,QRY=72,
    THEN=73,AND=74,NOT=75,GOAL_COMPLETED=76,PARENT_TARGET_EDGE=77,EQ_OP=78,
    NE_OP=79,LT_OP=80,LTE_OP=81,GT_OP=82,GTE_OP=83,BAD=84,
    IDENTIFIER=85,LOCAL_VAR=86,INTEGER=87,FLOAT=88,STRING=89};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class GoalParser: ShiftReduceParser<LSLib.LS.Story.GoalParser.ASTNode, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[66];
  private static State[] states = new State[134];
  private static string[] nonTerms = new string[] {
      "GoalFile", "$accept", "Goal", "Version", "SubGoalCombiner", "InitSection", 
      "KBSection", "ExitSection", "TargetEdges", "Facts", "Rules", "TargetEdge", 
      "Fact", "FactStatement", "FactElementList", "FactElement", "TypedConstant", 
      "Constant", "Rule", "RuleType", "Conditions", "ActionList", "Condition", 
      "ConditionParamList", "TypedLocalVar", "ConditionParam", "Operator", "Action", 
      "ActionStatement", "ActionParamList", "ActionParam", };

  static GoalParser() {
    states[0] = new State(new int[]{63,132},new int[]{-1,1,-3,3,-4,4});
    states[1] = new State(new int[]{62,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{64,130},new int[]{-5,5});
    states[5] = new State(new int[]{66,128},new int[]{-6,6});
    states[6] = new State(new int[]{67,38},new int[]{-7,7});
    states[7] = new State(new int[]{68,13},new int[]{-8,8});
    states[8] = new State(-9,new int[]{-9,9});
    states[9] = new State(new int[]{77,11,62,-3},new int[]{-12,10});
    states[10] = new State(-10);
    states[11] = new State(new int[]{89,12});
    states[12] = new State(-11);
    states[13] = new State(-12,new int[]{-10,14});
    states[14] = new State(new int[]{69,15,85,18,75,36},new int[]{-13,16,-14,17});
    states[15] = new State(-8);
    states[16] = new State(-13);
    states[17] = new State(-14);
    states[18] = new State(new int[]{40,19});
    states[19] = new State(new int[]{85,27,89,28,87,29,88,30,40,31,41,-17,44,-17},new int[]{-15,20,-16,35,-17,25,-18,26});
    states[20] = new State(new int[]{41,21,44,23});
    states[21] = new State(new int[]{59,22});
    states[22] = new State(-16);
    states[23] = new State(new int[]{85,27,89,28,87,29,88,30,40,31},new int[]{-16,24,-17,25,-18,26});
    states[24] = new State(-19);
    states[25] = new State(-20);
    states[26] = new State(-62);
    states[27] = new State(-21);
    states[28] = new State(-22);
    states[29] = new State(-23);
    states[30] = new State(-24);
    states[31] = new State(new int[]{85,32});
    states[32] = new State(new int[]{41,33});
    states[33] = new State(new int[]{85,27,89,28,87,29,88,30},new int[]{-18,34});
    states[34] = new State(-63);
    states[35] = new State(-18);
    states[36] = new State(new int[]{85,18},new int[]{-14,37});
    states[37] = new State(-15);
    states[38] = new State(-25,new int[]{-11,39});
    states[39] = new State(new int[]{70,125,71,126,72,127,68,-7},new int[]{-19,40,-20,41});
    states[40] = new State(-26);
    states[41] = new State(new int[]{85,89,86,60,40,55,75,104,89,28,87,29,88,30},new int[]{-21,42,-23,124,-25,98,-26,115,-17,95,-18,26});
    states[42] = new State(new int[]{73,43,74,87});
    states[43] = new State(-49,new int[]{-22,44});
    states[44] = new State(new int[]{85,47,86,60,40,69,75,72,76,85,70,-27,71,-27,72,-27,68,-27},new int[]{-28,45,-29,46,-25,62});
    states[45] = new State(-50);
    states[46] = new State(-51);
    states[47] = new State(new int[]{40,48});
    states[48] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60,41,-57,44,-57},new int[]{-30,49,-31,61,-17,54,-18,26,-25,59});
    states[49] = new State(new int[]{41,50,44,52});
    states[50] = new State(new int[]{59,51});
    states[51] = new State(-53);
    states[52] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60},new int[]{-31,53,-17,54,-18,26,-25,59});
    states[53] = new State(-59);
    states[54] = new State(-60);
    states[55] = new State(new int[]{85,56});
    states[56] = new State(new int[]{41,57});
    states[57] = new State(new int[]{86,58,85,27,89,28,87,29,88,30},new int[]{-18,34});
    states[58] = new State(-65);
    states[59] = new State(-61);
    states[60] = new State(-64);
    states[61] = new State(-58);
    states[62] = new State(new int[]{46,63});
    states[63] = new State(new int[]{85,64});
    states[64] = new State(new int[]{40,65});
    states[65] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60,41,-57,44,-57},new int[]{-30,66,-31,61,-17,54,-18,26,-25,59});
    states[66] = new State(new int[]{41,67,44,52});
    states[67] = new State(new int[]{59,68});
    states[68] = new State(-54);
    states[69] = new State(new int[]{85,70});
    states[70] = new State(new int[]{41,71});
    states[71] = new State(new int[]{86,58});
    states[72] = new State(new int[]{85,73,86,60,40,69},new int[]{-25,78});
    states[73] = new State(new int[]{40,74});
    states[74] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60,41,-57,44,-57},new int[]{-30,75,-31,61,-17,54,-18,26,-25,59});
    states[75] = new State(new int[]{41,76,44,52});
    states[76] = new State(new int[]{59,77});
    states[77] = new State(-55);
    states[78] = new State(new int[]{46,79});
    states[79] = new State(new int[]{85,80});
    states[80] = new State(new int[]{40,81});
    states[81] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60,41,-57,44,-57},new int[]{-30,82,-31,61,-17,54,-18,26,-25,59});
    states[82] = new State(new int[]{41,83,44,52});
    states[83] = new State(new int[]{59,84});
    states[84] = new State(-56);
    states[85] = new State(new int[]{59,86});
    states[86] = new State(-52);
    states[87] = new State(new int[]{85,89,86,60,40,55,75,104,89,28,87,29,88,30},new int[]{-23,88,-25,98,-26,115,-17,95,-18,26});
    states[88] = new State(-32);
    states[89] = new State(new int[]{40,90,78,-21,79,-21,80,-21,81,-21,82,-21,83,-21});
    states[90] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60,41,-38,44,-38},new int[]{-24,91,-26,97,-17,95,-18,26,-25,96});
    states[91] = new State(new int[]{41,92,44,93});
    states[92] = new State(-33);
    states[93] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60},new int[]{-26,94,-17,95,-18,26,-25,96});
    states[94] = new State(-40);
    states[95] = new State(-41);
    states[96] = new State(-42);
    states[97] = new State(-39);
    states[98] = new State(new int[]{46,99,78,-42,79,-42,80,-42,81,-42,82,-42,83,-42});
    states[99] = new State(new int[]{85,100});
    states[100] = new State(new int[]{40,101});
    states[101] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60,41,-38,44,-38},new int[]{-24,102,-26,97,-17,95,-18,26,-25,96});
    states[102] = new State(new int[]{41,103,44,93});
    states[103] = new State(-34);
    states[104] = new State(new int[]{85,105,86,60,40,69},new int[]{-25,109});
    states[105] = new State(new int[]{40,106});
    states[106] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60,41,-38,44,-38},new int[]{-24,107,-26,97,-17,95,-18,26,-25,96});
    states[107] = new State(new int[]{41,108,44,93});
    states[108] = new State(-35);
    states[109] = new State(new int[]{46,110});
    states[110] = new State(new int[]{85,111});
    states[111] = new State(new int[]{40,112});
    states[112] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60,41,-38,44,-38},new int[]{-24,113,-26,97,-17,95,-18,26,-25,96});
    states[113] = new State(new int[]{41,114,44,93});
    states[114] = new State(-36);
    states[115] = new State(new int[]{78,118,79,119,80,120,81,121,82,122,83,123},new int[]{-27,116});
    states[116] = new State(new int[]{85,27,89,28,87,29,88,30,40,55,86,60},new int[]{-26,117,-17,95,-18,26,-25,96});
    states[117] = new State(-37);
    states[118] = new State(-43);
    states[119] = new State(-44);
    states[120] = new State(-45);
    states[121] = new State(-46);
    states[122] = new State(-47);
    states[123] = new State(-48);
    states[124] = new State(-31);
    states[125] = new State(-28);
    states[126] = new State(-29);
    states[127] = new State(-30);
    states[128] = new State(-12,new int[]{-10,129});
    states[129] = new State(new int[]{85,18,75,36,67,-6},new int[]{-13,16,-14,17});
    states[130] = new State(new int[]{65,131});
    states[131] = new State(-5);
    states[132] = new State(new int[]{87,133});
    states[133] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,62});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4,-5,-6,-7,-8,-9});
    rules[4] = new Rule(-4, new int[]{63,87});
    rules[5] = new Rule(-5, new int[]{64,65});
    rules[6] = new Rule(-6, new int[]{66,-10});
    rules[7] = new Rule(-7, new int[]{67,-11});
    rules[8] = new Rule(-8, new int[]{68,-10,69});
    rules[9] = new Rule(-9, new int[]{});
    rules[10] = new Rule(-9, new int[]{-9,-12});
    rules[11] = new Rule(-12, new int[]{77,89});
    rules[12] = new Rule(-10, new int[]{});
    rules[13] = new Rule(-10, new int[]{-10,-13});
    rules[14] = new Rule(-13, new int[]{-14});
    rules[15] = new Rule(-13, new int[]{75,-14});
    rules[16] = new Rule(-14, new int[]{85,40,-15,41,59});
    rules[17] = new Rule(-15, new int[]{});
    rules[18] = new Rule(-15, new int[]{-16});
    rules[19] = new Rule(-15, new int[]{-15,44,-16});
    rules[20] = new Rule(-16, new int[]{-17});
    rules[21] = new Rule(-18, new int[]{85});
    rules[22] = new Rule(-18, new int[]{89});
    rules[23] = new Rule(-18, new int[]{87});
    rules[24] = new Rule(-18, new int[]{88});
    rules[25] = new Rule(-11, new int[]{});
    rules[26] = new Rule(-11, new int[]{-11,-19});
    rules[27] = new Rule(-19, new int[]{-20,-21,73,-22});
    rules[28] = new Rule(-20, new int[]{70});
    rules[29] = new Rule(-20, new int[]{71});
    rules[30] = new Rule(-20, new int[]{72});
    rules[31] = new Rule(-21, new int[]{-23});
    rules[32] = new Rule(-21, new int[]{-21,74,-23});
    rules[33] = new Rule(-23, new int[]{85,40,-24,41});
    rules[34] = new Rule(-23, new int[]{-25,46,85,40,-24,41});
    rules[35] = new Rule(-23, new int[]{75,85,40,-24,41});
    rules[36] = new Rule(-23, new int[]{75,-25,46,85,40,-24,41});
    rules[37] = new Rule(-23, new int[]{-26,-27,-26});
    rules[38] = new Rule(-24, new int[]{});
    rules[39] = new Rule(-24, new int[]{-26});
    rules[40] = new Rule(-24, new int[]{-24,44,-26});
    rules[41] = new Rule(-26, new int[]{-17});
    rules[42] = new Rule(-26, new int[]{-25});
    rules[43] = new Rule(-27, new int[]{78});
    rules[44] = new Rule(-27, new int[]{79});
    rules[45] = new Rule(-27, new int[]{80});
    rules[46] = new Rule(-27, new int[]{81});
    rules[47] = new Rule(-27, new int[]{82});
    rules[48] = new Rule(-27, new int[]{83});
    rules[49] = new Rule(-22, new int[]{});
    rules[50] = new Rule(-22, new int[]{-22,-28});
    rules[51] = new Rule(-28, new int[]{-29});
    rules[52] = new Rule(-28, new int[]{76,59});
    rules[53] = new Rule(-29, new int[]{85,40,-30,41,59});
    rules[54] = new Rule(-29, new int[]{-25,46,85,40,-30,41,59});
    rules[55] = new Rule(-29, new int[]{75,85,40,-30,41,59});
    rules[56] = new Rule(-29, new int[]{75,-25,46,85,40,-30,41,59});
    rules[57] = new Rule(-30, new int[]{});
    rules[58] = new Rule(-30, new int[]{-31});
    rules[59] = new Rule(-30, new int[]{-30,44,-31});
    rules[60] = new Rule(-31, new int[]{-17});
    rules[61] = new Rule(-31, new int[]{-25});
    rules[62] = new Rule(-17, new int[]{-18});
    rules[63] = new Rule(-17, new int[]{40,85,41,-18});
    rules[64] = new Rule(-25, new int[]{86});
    rules[65] = new Rule(-25, new int[]{40,85,41,86});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)GoalTokens.error, (int)GoalTokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 3: // Goal -> Version, SubGoalCombiner, InitSection, KBSection, ExitSection, 
              //         TargetEdges
#line 55 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
     { CurrentSemanticValue = MakeGoal(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 4: // Version -> VERSION, INTEGER
#line 58 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 5: // SubGoalCombiner -> SUBGOALCOMBINER, SGC_AND
#line 61 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 6: // InitSection -> INITSECTION, Facts
#line 64 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 7: // KBSection -> KBSECTION, Rules
#line 67 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 8: // ExitSection -> EXITSECTION, Facts, ENDEXITSECTION
#line 70 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
 { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 9: // TargetEdges -> /* empty */
#line 72 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                          { CurrentSemanticValue = MakeParentTargetEdgeList(); }
#line default
        break;
      case 10: // TargetEdges -> TargetEdges, TargetEdge
#line 73 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                     { CurrentSemanticValue = MakeParentTargetEdgeList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 11: // TargetEdge -> PARENT_TARGET_EDGE, STRING
#line 77 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
 { CurrentSemanticValue = MakeParentTargetEdge(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 12: // Facts -> /* empty */
#line 79 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                    { CurrentSemanticValue = MakeFactList(); }
#line default
        break;
      case 13: // Facts -> Facts, Fact
#line 80 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                   { CurrentSemanticValue = MakeFactList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 14: // Fact -> FactStatement
#line 83 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 15: // Fact -> NOT, FactStatement
#line 84 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                         { CurrentSemanticValue = MakeNotFact(ValueStack[ValueStack.Depth-2]); }
#line default
        break;
      case 16: // FactStatement -> IDENTIFIER, '(', FactElementList, ')', ';'
#line 88 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
 { CurrentSemanticValue = MakeFactStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 17: // FactElementList -> /* empty */
#line 90 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                              { CurrentSemanticValue = MakeFactElementList(); }
#line default
        break;
      case 18: // FactElementList -> FactElement
#line 91 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                              { CurrentSemanticValue = MakeFactElementList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 19: // FactElementList -> FactElementList, ',', FactElement
#line 92 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                  { CurrentSemanticValue = MakeFactElementList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 20: // FactElement -> TypedConstant
#line 96 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
 { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 21: // Constant -> IDENTIFIER
#line 98 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                      { CurrentSemanticValue = MakeConstIdentifier(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 22: // Constant -> STRING
#line 99 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                  { CurrentSemanticValue = MakeConstString(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 23: // Constant -> INTEGER
#line 100 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
             { CurrentSemanticValue = MakeConstInteger(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 24: // Constant -> FLOAT
#line 101 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
           { CurrentSemanticValue = MakeConstFloat(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 25: // Rules -> /* empty */
#line 104 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                    { CurrentSemanticValue = MakeRuleList(); }
#line default
        break;
      case 26: // Rules -> Rules, Rule
#line 105 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                   { CurrentSemanticValue = MakeRuleList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 27: // Rule -> RuleType, Conditions, THEN, ActionList
#line 109 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
 { CurrentSemanticValue = MakeRule(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 28: // RuleType -> IF
#line 111 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
              { CurrentSemanticValue = MakeRuleType(RuleType.Rule); }
#line default
        break;
      case 29: // RuleType -> PROC
#line 112 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                { CurrentSemanticValue = MakeRuleType(RuleType.Proc); }
#line default
        break;
      case 30: // RuleType -> QRY
#line 113 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
         { CurrentSemanticValue = MakeRuleType(RuleType.Query); }
#line default
        break;
      case 31: // Conditions -> Condition
#line 116 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                       { CurrentSemanticValue = MakeConditionList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 32: // Conditions -> Conditions, AND, Condition
#line 117 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                      { CurrentSemanticValue = MakeConditionList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 33: // Condition -> IDENTIFIER, '(', ConditionParamList, ')'
#line 120 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                   { CurrentSemanticValue = MakeFuncCondition(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], false); }
#line default
        break;
      case 34: // Condition -> TypedLocalVar, '.', IDENTIFIER, '(', ConditionParamList, ')'
#line 121 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                                     { CurrentSemanticValue = MakeObjectFuncCondition(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], false); }
#line default
        break;
      case 35: // Condition -> NOT, IDENTIFIER, '(', ConditionParamList, ')'
#line 122 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                       { CurrentSemanticValue = MakeFuncCondition(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], true); }
#line default
        break;
      case 36: // Condition -> NOT, TypedLocalVar, '.', IDENTIFIER, '(', ConditionParamList, ')'
#line 123 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                                         { CurrentSemanticValue = MakeObjectFuncCondition(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], true); }
#line default
        break;
      case 37: // Condition -> ConditionParam, Operator, ConditionParam
#line 124 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                    { CurrentSemanticValue = MakeBinaryCondition(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 38: // ConditionParamList -> /* empty */
#line 127 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                 { CurrentSemanticValue = MakeConditionParamList(); }
#line default
        break;
      case 39: // ConditionParamList -> ConditionParam
#line 128 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                    { CurrentSemanticValue = MakeConditionParamList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 40: // ConditionParamList -> ConditionParamList, ',', ConditionParam
#line 129 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                               { CurrentSemanticValue = MakeConditionParamList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 41: // ConditionParam -> TypedConstant
#line 132 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                               { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 42: // ConditionParam -> TypedLocalVar
#line 133 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                               { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 43: // Operator -> EQ_OP
#line 136 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                 { CurrentSemanticValue = MakeOperator(RelOpType.Equal); }
#line default
        break;
      case 44: // Operator -> NE_OP
#line 137 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                 { CurrentSemanticValue = MakeOperator(RelOpType.NotEqual); }
#line default
        break;
      case 45: // Operator -> LT_OP
#line 138 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
           { CurrentSemanticValue = MakeOperator(RelOpType.Less); }
#line default
        break;
      case 46: // Operator -> LTE_OP
#line 139 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
            { CurrentSemanticValue = MakeOperator(RelOpType.LessOrEqual); }
#line default
        break;
      case 47: // Operator -> GT_OP
#line 140 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
           { CurrentSemanticValue = MakeOperator(RelOpType.Greater); }
#line default
        break;
      case 48: // Operator -> GTE_OP
#line 141 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
            { CurrentSemanticValue = MakeOperator(RelOpType.GreaterOrEqual); }
#line default
        break;
      case 49: // ActionList -> /* empty */
#line 144 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                         { CurrentSemanticValue = MakeActionList(); }
#line default
        break;
      case 50: // ActionList -> ActionList, Action
#line 145 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                               { CurrentSemanticValue = MakeActionList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 51: // Action -> ActionStatement
#line 148 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 52: // Action -> GOAL_COMPLETED, ';'
#line 149 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                         { CurrentSemanticValue = MakeGoalCompletedAction(); }
#line default
        break;
      case 53: // ActionStatement -> IDENTIFIER, '(', ActionParamList, ')', ';'
#line 152 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                         { CurrentSemanticValue = MakeActionStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], false); }
#line default
        break;
      case 54: // ActionStatement -> TypedLocalVar, '.', IDENTIFIER, '(', ActionParamList, ')', 
               //                    ';'
#line 153 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                                           { CurrentSemanticValue = MakeActionStatement(ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], false); }
#line default
        break;
      case 55: // ActionStatement -> NOT, IDENTIFIER, '(', ActionParamList, ')', ';'
#line 154 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                 { CurrentSemanticValue = MakeActionStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], true); }
#line default
        break;
      case 56: // ActionStatement -> NOT, TypedLocalVar, '.', IDENTIFIER, '(', ActionParamList, 
               //                    ')', ';'
#line 155 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                                                               { CurrentSemanticValue = MakeActionStatement(ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], true); }
#line default
        break;
      case 57: // ActionParamList -> /* empty */
#line 158 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                              { CurrentSemanticValue = MakeActionParamList(); }
#line default
        break;
      case 58: // ActionParamList -> ActionParam
#line 159 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                              { CurrentSemanticValue = MakeActionParamList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 59: // ActionParamList -> ActionParamList, ',', ActionParam
#line 160 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                      { CurrentSemanticValue = MakeActionParamList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 60: // ActionParam -> TypedConstant
#line 163 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 61: // ActionParam -> TypedLocalVar
#line 164 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                            { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 62: // TypedConstant -> Constant
#line 167 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                         { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 63: // TypedConstant -> '(', IDENTIFIER, ')', Constant
#line 168 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                            { CurrentSemanticValue = MakeTypedConstant(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 64: // TypedLocalVar -> LOCAL_VAR
#line 171 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                          { CurrentSemanticValue = MakeLocalVar(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 65: // TypedLocalVar -> '(', IDENTIFIER, ')', LOCAL_VAR
#line 172 "C:\Dev\DOS\LS\LsLib\LSLib\\LS\Story\GoalParser\Goal.yy"
                                             { CurrentSemanticValue = MakeLocalVar(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((GoalTokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((GoalTokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
